{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","console","log","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","aria-label","onChange","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequesetRobots","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68045bec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shawdow-5\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('CardList');\r\n    return (\r\n        <div>\r\n            {robots.map(robot => <Card id={robot.id} name={robot.name} email={robot.email} key={robot.id} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  console.log('Search box')\r\n    return (\r\n      <div className=\"pa2\">\r\n        <input className=\"pa3 ba b--green bg-lightest-blue\" type='search' placeholder='search robots' aria-label='Search Robots' onChange={searchChange}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oops. This is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n    \r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid #ccc', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(nextProps, nextState)\r\n       if(this.state.count !== nextState.count) {\r\n           return true\r\n       }\r\n       return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState({count: this.state.count + 1})\r\n    }\r\n    render() {\r\n        console.log('Counter Button');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <CounterButton color={\"red\"}/>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {connect} from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequesetRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {        \r\n        this.props.onRequesetRobots();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        \r\n        return isPending ? \r\n           <h1>Loading</h1> :\r\n        (\r\n            <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                   <ErrorBoundary>\r\n                        <CardList robots={filterRobots} />\r\n                   </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default: \r\n            return state;\r\n        \r\n\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots} from './reducers'\nimport \"tachyons\";\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n    searchRobots, requestRobots\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App  />\n    </Provider>,\n   \n    \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}